//package ru.itmo.dkudaiberdieva.sd.mvc.controller;
//
//import kotlin.Pair;
//import org.junit.Before;
//import org.junit.Test;
//import org.junit.runner.RunWith;
//import org.mockito.Mockito;
//import org.mockito.MockitoAnnotations;
//import org.mockito.junit.MockitoJUnitRunner;
//import org.springframework.ui.ModelMap;
//import ru.itmo.dkudaiberdieva.sd.mvc.repository.TaskRepository;
//import ru.itmo.dkudaiberdieva.sd.mvc.repository.TaskListDao;
//import ru.itmo.dkudaiberdieva.sd.mvc.model.Task;
//import ru.itmo.dkudaiberdieva.sd.mvc.model.TaskList;
//
//import java.util.List;
//
//import static org.mockito.Mockito.mock;
//
//@RunWith(MockitoJUnitRunner.class)
//public class TaskControllerTestJ {
//
//    TaskListDao taskListDao = mock(TaskListDao.class);
//
//    TaskRepository taskRepository = mock(TaskRepository.class);
//
////    @InjectMocks
//    TaskController controller = new TaskController(taskRepository, taskListDao);
//
//    @Before
//    public void setUp() {
//        MockitoAnnotations.initMocks(this);
////        controller = new TaskController(taskDao, taskListDao);
//    }
//
//    @Test
//    public void groupTaskByList() {
//        var map = new ModelMap();
//        Mockito.when(taskRepository.findAll())
//                .thenReturn(tasks);
//        Mockito.when(taskListDao.findAll())
//                .thenReturn(List.of(taskList, taskList2, emptyTaskList));
//
//        controller.getGroupedTasks(map);
//
//        var groupedTasks = (List<Pair<TaskList, List<Task>>>) map.get("tasks");
//
//        final Pair<TaskList, List<Task>> byTaskList1 = groupedTasks.stream().filter(p -> taskList.equals(p.getFirst())).findFirst().orElseThrow();
////        val byTaskList2 = groupedTasks.find {
////            it.first == taskList2
////        }
////        val byEmptyTaskList = groupedTasks.find {
////            it.first == emptyTaskList
////        }
//
////        assertEquals(3, groupedTasks.size)
////        assertNotNull(byTaskList1)
////        assertNotNull(byTaskList2)
////        assertNotNull(byEmptyTaskList)
////        assertEquals(2, byTaskList1.second.size)
////        assertEquals(1, byTaskList2.second.size)
////        assertEquals(0, byEmptyTaskList.second.size)
////        assertTrue(byTaskList1.second[0].let { it == tasks[0] || it == tasks[1] })
////        assertEquals(byTaskList1.second[0], tasks[2])
//    }
//
//
//    private static final long TASK_LIST_ID_1 = 1;
//    private static final long TASK_LIST_ID_2 = 2;
//    private static final long EMPTY_LIST_ID_2 = 2;
//    private static final TaskList taskList = new TaskList(TASK_LIST_ID_1, "new task list");
//    private static final TaskList taskList2 = new TaskList(TASK_LIST_ID_2, "sad task list");
//    private static final TaskList emptyTaskList = new TaskList(EMPTY_LIST_ID_2, "sad task list");
//    private static final List<Task> tasks = List.of(
//            new Task(10L, TASK_LIST_ID_1, "uf uf uf", false),
//            new Task(20L, TASK_LIST_ID_1, "ai ai ai", false),
//            new Task(30L, TASK_LIST_ID_2, "oi oi oi", false)
//    );
//
//}
//
